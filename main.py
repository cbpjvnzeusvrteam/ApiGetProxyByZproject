import asyncio
import aiohttp
from flask import Flask, jsonify, Response

app = Flask(__name__)

# üåê Danh s√°ch URL ch·ª©a proxy
henry_proxy = [
    "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt",
    "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks5.txt",
    "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks4.txt",
]

# üè∑Ô∏è Danh s√°ch tag th√¥ng tin th√™m
TAGS = [
    "admin@zproject2",
    "group@zproject3",
    "group@zproject4",
    "bot@zprojectX_bot"
]

# üß† X√°c ƒë·ªãnh lo·∫°i proxy t·ª´ URL
def detect_type(url):
    if "socks5" in url:
        return "socks5"
    elif "socks4" in url:
        return "socks4"
    else:
        return "http"

# ‚úÖ Ki·ªÉm tra proxy s·ªëng
async def check_proxy(session, proxy, proxy_type):
    test_url = "http://httpbin.org/ip"
    proxy_url = f"{proxy_type}://{proxy}"
    try:
        async with session.get(test_url, proxy=proxy_url, timeout=5) as resp:
            if resp.status == 200:
                return {
                    "proxy": proxy,
                    "type": proxy_type.upper(),
                    "more_info": TAGS
                }
    except:
        return None

# üîç L·∫•y v√† l·ªçc proxy s·ªëng
async def fetch_and_validate_proxies(limit):
    proxies = set()
    async with aiohttp.ClientSession() as session:
        for url in henry_proxy:
            try:
                async with session.get(url, timeout=10) as resp:
                    if resp.status == 200:
                        data = await resp.text()
                        for line in data.splitlines():
                            if ':' in line:
                                proxies.add((line.strip(), detect_type(url)))
            except:
                continue

        tasks = [
            check_proxy(session, proxy, ptype)
            for proxy, ptype in proxies
        ]

        results = []
        for task in asyncio.as_completed(tasks):
            result = await task
            if result:
                results.append(result)
            if len(results) >= min(limit, 100):
                break
        return results

# üì¶ API JSON: Tr·∫£ v·ªÅ proxy chi ti·∫øt
@app.route('/getproxy=<int:count>', methods=['GET'])
def get_proxy(count):
    if count > 100:
        return jsonify({
            "thanhcong": False,
            "thongbao": "S·ªë l∆∞·ª£ng y√™u c·∫ßu v∆∞·ª£t qu√° gi·ªõi h·∫°n (t·ªëi ƒëa 100 proxy)"
        })

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    proxies = loop.run_until_complete(fetch_and_validate_proxies(count))

    if len(proxies) < count:
        return jsonify({
            "thanhcong": False,
            "thongbao": f"Kh√¥ng ƒë·ªß proxy s·ªëng. Ch·ªâ t√¨m ƒë∆∞·ª£c {len(proxies)} proxy."
        })

    return jsonify({
        "thanhcong": True,
        "soproxyget": count,
        "sodem_proxy_song": len(proxies),
        "danh_sach_proxy": proxies
    })

# üìÑ API RAW: Tr·∫£ v·ªÅ danh s√°ch proxy d·∫°ng text thu·∫ßn
@app.route('/getproxyraw=<int:count>', methods=['GET'])
def get_proxy_raw(count):
    if count > 100:
        return Response("S·ªë l∆∞·ª£ng y√™u c·∫ßu v∆∞·ª£t qu√° gi·ªõi h·∫°n (t·ªëi ƒëa 100 proxy)", status=400)

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    proxies = loop.run_until_complete(fetch_and_validate_proxies(count))

    if len(proxies) < count:
        return Response(f"Kh√¥ng ƒë·ªß proxy s·ªëng. Ch·ªâ t√¨m ƒë∆∞·ª£c {len(proxies)} proxy.", status=503)

    raw_list = "\n".join([p["proxy"] for p in proxies])
    return Response(raw_list, mimetype='text/plain')

# üöÄ Ch·∫°y server
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)